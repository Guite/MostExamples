application ValidationTest {
	documentation ""
	vendor Guite
	author "Axel Guckelsberger"
	email "info@modulestudio.de"
	url "http://modulestudio.de"
	prefix valtest
	modelPath ""
	modelLayer {
		modelContainer Model {
			entities {
				entity drink leading {
					nameMultiple drinks
					incoming ( "menu.drinks" ) fields {
						string name leading {
							defaultValue ""
						},
						integer amount {
							defaultValue "0"
						}
					}
					indexes {
						index amountIndex {
							items {
								indexItem name
							}
						}
					}
				},
				entity cake {
					nameMultiple cakes
					incoming ( "menu.cake" ) outgoing ( "cakes.ingredients" ) fields {
						string name leading {
							defaultValue ""
						},
						boolean hasChocolate {
							defaultValue ^true
						},
						datetime cakeDatetime {
							defaultValue ""
							mandatory false
						},
						text recipeText {
							defaultValue "Enter your recipe instruction here"
						}
					}
				},
				entity menu {
					nameMultiple menus
					outgoing ( "menu.cake",
					"menu.drinks" ) fields {
						string title leading {
							defaultValue ""
						},
						date publishDate {
							defaultValue ""
						},
						decimal price {
							defaultValue "0.00"
						},
						float amount {
							defaultValue "0.00"
						}
					}
				},
				entity test {
					nameMultiple tests
					incoming ( "productArticle.productTests" ) fields {
						boolean boolTest {
							defaultValue ^true
						},
						integer intTest {
							defaultValue "0"
						},
						integer intTestUnique unique {
							defaultValue "0"
							mandatory false
							length 4
							minValue -5
							maxValue 50
						},
						integer intTestWithRange {
							defaultValue "5"
							minValue 3
							maxValue 10
						},
						float floatTest {
							defaultValue "0.00"
						},
						decimal decimalTest {
							defaultValue "0.000"
							scale 3
						},
						string stringTest leading {
							defaultValue "This is a default value"
						},
						string stringTestColour nospace htmlcolour {
							defaultValue "#000000"
							length 7
						},
						string stringTestCountry fixed nospace country {
							defaultValue DE
							length 5
						},
						text textTest {
							defaultValue ""
							mandatory false
						},
						email emailTest nospace {
							defaultValue "test@example.com"
						},
						url urlTest {
							defaultValue "http://www.example.com"
						},
						upload uploadTest {
							mandatory false
						},
						user userTest,
						array arrayTest {
							defaultValue ""
							mandatory false
						},
						object objectTest {
							mandatory false
						},
						datetime datetimeTest {
							defaultValue ""
						},
						datetime datetimeTestPast past {
							defaultValue ""
							mandatory false
						},
						datetime datetimeTestFuture future {
							defaultValue ""
							mandatory false
						},
						date dateTest {
							defaultValue ""
						},
						time timeTest {
							defaultValue ""
						},
						string myLanguage nospace language {
							defaultValue de
							mandatory false
							length 5
						},
						string myPassword nospace password {
							defaultValue ""
							mandatory false
							minLength 5
							length 20
						}
					}
					indexes {
						index myIndex {
							items {
								indexItem intTest,
								indexItem emailTest
							}
						},
						index userIndex {
							items {
								indexItem userTest
							}
						}
					}
				},
				entity myUser {
					nameMultiple myUsers
					incoming ( "inheritance.0",
					"knowingUser.knownUsers" ) outgoing ( "knowingUser.knownUsers" ) fields {
						user myUser leading unique,
						text description {
							defaultValue ""
							mandatory false
						},
						upload profileImage {
							mandatory false
						},
						string columnType {
							defaultValue ""
						},
						integer knownId {
							defaultValue "0"
						}
					}
				},
				entity mySpecialUser {
					nameMultiple mySpecialUsers
					outgoing ( "inheritance.0" ) fields {
						email specialEmail leading {
							defaultValue ""
						},
						array specialSettings {
							defaultValue ""
						}
					}
				},
				entity ingredient {
					nameMultiple ingredients
					incoming ( "cakes.ingredients" ) fields {
						string name leading {
							defaultValue ""
						}
					}
				},
				entity article {
					nameMultiple articles
					outgoing ( "productArticle.productTests" ) fields {
						string title leading {
							defaultValue ""
						},
						integer checkthat {
							defaultValue ""
							length 16
						},
						text asdd {
							defaultValue ""
						}
					}
				}
			}
			relations {
				one2one {
					source menu
					sourceAlias menu
					target cake
					targetAlias cake
				},
				one2many {
					source menu
					sourceAlias menu
					target drink
					targetAlias drinks
				},
				inheritance {
					source mySpecialUser
					target myUser
				},
				one2many {
					source myUser
					sourceAlias knowingUser
					target myUser
					targetAlias knownUsers
					targetField knownId
				},
				many2many {
					source cake
					sourceAlias cakes
					target ingredient
					targetAlias ingredients
					refClass cakeIngredients
				},
				one2many {
					source article
					sourceAlias productArticle
					target test
					targetAlias productTests
				}
			}
			variables {
				varContainer Variables {
					vars {
						textVar defaultIntroDescription {
							value "This is an intro description"
							maxLength 200
						},
						intVar pageSize {
							value "20"
						},
						boolVar inMaintenanceMode {
							value ^false
						},
						filePathVar introImageFilePath {
							value "test.jpg"
						},
						listVar singleList {
							value no
							items {
								listVarItem yes,
								listVarItem default no
							}
						},
						listVar multiList multiple {
							value "one, three"
							items {
								listVarItem one,
								listVarItem default two,
								listVarItem default three
							}
						}
					}
				}
			}
		}
	}
	controllerLayer {
		controllerContainer Controller {
			modelContext ( "ValidationTest.Model" )
			processViews "ValidationTest.View"
			controllers {
				adminController Admin {
					actions {
						mainAction Main,
						viewAction View,
						displayAction Display,
						editAction Edit,
						deleteAction Delete
					}
				},
				userController User {
					actions {
						mainAction Main,
						viewAction View,
						displayAction Display,
						editAction Edit
					}
				},
				ajaxController Ajax {
					actions {
						mainAction Main
					}
				}
			}
			handlers {
				listHandler ListHandler {
					events {
						startEvent StartEvent,
						normalEvent MyEvent
					}
				}
			}
		}
	}
	viewLayer {
		viewContainer View {
			controller "ValidationTest.Controller"
		}
	}
}